# test the crude oil price rather than return because the arch effect of return of crude oil is not very significant
df.set_index("Date",inplace=True)
crude_oil_px=df["crude oil"]

result = adfuller(crude_oil_px)
print('ADF statistic: ',  result[0])
print('p-value:', result[1])

critical_values = result[4]
for key, value in critical_values.items():
    print('Critical value (%s): %.3f' % (key, value))
# time seirs is not stationary

# make first-order difference to make the series stationary
df_log = np.log(crude_oil_px)
df_log_ma= df_log.rolling(2).mean()
df_detrend_crudeoil = df_log - df_log_ma  #通过一阶差分使得时间序列平稳
df_detrend_crudeoil.dropna(inplace=True)

# do adf test again
result = adfuller(df_detrend_crudeoil)
print('ADF statistic: ', result[0])
print('p-value: %.5f' % result[1])

critical_values = result[4]
for key, value in critical_values.items():
    print('Critical value (%s): %.3f' % (key, value))
# now the time series is stationary

lbvalue,pvalue=acorr_ljungbox(df_detrend_crudeoil)
pvalue

# reject null hypothesis,the trend is not a noise trend(白噪声检验)

def determinate_order(timeseries): 
    plot_acf(timeseries,lags=40) 
    plot_pacf(timeseries,lags=40)
    plt.show()
determinate_order(df_detrend_crudeoil)

arma_model=ARMA(df_detrend_crudeoil,order=(2,3))
arma_fitted=arma_model.fit()
arma_fitted.summary()
# rt=(-0.6257)r(t-1) +(-0.5488)r(t-2) +(0.6156)re(t) +(0.5529)re(t-1)+(-0.0907)re(t-2)

resid=arma_fitted.resid
plt.figure(figsize=(12,8))
qqplot(resid,line='q',fit=True)
durbin_watson(resid.values)

# DW test is close to 2,so there is no autocorrelation in residuals.
# According to qq plot,the residuls follows normal distributionfrom statsmodels.stats.stattools import durbin_watson 

resid2=resid**2
determinate_order(resid2)
# there is a autocorrelation in squared residuals,so we construt 

# build a GARCH(1,1) model
# 选择GARCH(1,1)，PACF和ACF满足一阶截尾
garch=arch_model(resid2,mean="constant",p=1,o=0,q=1,vol="GARCH")
garch_fitted=garch.fit()
garch_fitted

## the ARCH effect is not very significant so we just use the ARMA model to predict returns on oil price

# GARCH(1,1) model:re(t)=theta(t)*Wt   ## Wt is a nosie
# theta_t_squared= 0.1000*re(t-1)_squared+ 0.8800*theta(t-1)_squared
# ARMA(2,3) model:rt=(-0.6257)r(t-1) +(-0.5488)r(t-2) +(0.6156)re(t) +(0.5529)re(t-1)+(-0.0907)re(t-2)
# we use ARMA_GARCH model to predict crude oil price in a specific date

garch_fitted.resid.plot(figsize=(12,5))
plt.title('crude oil price simulating GARCH(1,1) model residuls',size=15)
plt.show()
garch_fitted.conditional_volatility.plot(figsize=(12,5),color='r')
plt.title('crude oil price conditional volatility',size=15)
plt.show()

# ARMA_GARCH Simulating:1.use ARMA(2,3)model to predict crude oil price 2.then use Garch(1,1)model adjust predicti
# plot 300 days predicted values and actual value
arma_fitted.predict().plot(figsize=(18,8),color="black",label="predicted")
df_detrend_crudeoil.plot(figsize=(18,8),color="red",linestyle="--",label="actual")
plt.legend()

arma_fitted.predict(start="2011-02-24",end="2012-05-02").plot(figsize=(14,8))

arma_fitted.predict(start="2011-02-24",end="2012-05-02").plot(figsize=(14,8))
df_detrend_crudeoil[0:300].plot(figsize=(18,8),color="red",linestyle="--",label="actual")
plt.title("comparison_ARMA model")

# now we use GARCH(1,1) model to adjust the prediction result

# plot the predicted value

adjusted_model1=garch_fitted.resid+arma_fitted.predict()-garch_fitted.resid.mean()
adjusted_model1[0:300].plot(figsize=(14,8))
# plot the actual value
df_detrend_crudeoil[0:300].plot(figsize=(14,8),color="red",linestyle="--",label="actual")

# compare
adjusted_model1[0:300].plot(figsize=(14,8),label="adjusted predict")
df_detrend_crudeoil[0:300].plot(figsize=(14,8),color="red",linestyle="--",label="actual")
plt.legend()
plt.title("comparison_adjusted model")

import plotly.figure_factory as ff
import plotly.graph_objs as go

overtime = go.Scatter(x = adjusted_model1[0:300].index, y = adjusted_model1[0:300])
go.Figure(overtime)

comparison = [ go.Scatter(x = adjusted_model1.index, y = adjusted_model1, name = "prediction"),
              go.Scatter(x =df_detrend_crudeoil.index, y = df_detrend_crudeoil, name = "actual")]
       
updatemenus = list([
    dict(active = -1, # This will initialize with no buttons active
         buttons = list([ # "Buttons" is a list of dictionaries 
             dict(label = "prediction",
                  method = "update",
                  args = [{"visible": [True, False]},
                          {"title": "prediction"}]),
             dict(label = "actual",
                  method = "update",
                  args = [{"visible": [False, True]},
                          {"title": "actual"}]),
             dict(label = "prediction + actual",
                  method = "update",
                  args = [{"visible": [True, True]},
                          {"title": "prediction versus actual"}])
         ]),
        )
])


layout = dict(title = "comparison_adjusted model1", updatemenus = updatemenus) # This is where you include the "buttons."

figure = dict(data = comparison, layout = layout)

go.Figure(figure)

# check the difference between real crude oil price and predicted crude oil price(1-st order difference)
error_pct=(df_detrend_crudeoil-adjusted_model1)/df_detrend_crudeoil

error_pct.plot(figsize=(14,8),color="r")

# predict future 90 days from 2020-7-21
def ARMA_GARCH_simulating_process(x):
    at = [0.0003983497116856076]
    y_value = []

    Rt=[-0.001976474941279647,0.001092522451997157]
    fi0 = 0
    fi1 = -0.6257
    fi2= -0.5488
    xita1 = 0.6156
    xita2=0.5529
    xita3=-0.0907
    AT = 0
    alpha0 = 0.02
    alpha1 = 0.2
    sigama = [0.000410]
    SIGAMA = 0
    beta1 = 0.78  #alpha1+beta1<1


    #generate shock序列
    for i in range(x):
        SIGAMA = math.sqrt(alpha0 + alpha1*pow(at[i],2) + beta1*pow(sigama[i],2))
        sigama.append(SIGAMA)
        AT = SIGAMA*np.random.normal(0,1)
        if i < 20:
            print(SIGAMA,  AT)
        
        at.append(AT)
    
 
    
    
    for j in range(2,x+1):
        rt = fi0+ fi1*Rt[j-1]+fi2*Rt[j-2]+xita1*at[j]+xita2*at[j-1]+xita3*at[j-2]
        Rt.append(rt)
    return Rt

Rt=ARMA_GARCH_simulating_process(90)
plt.figure(figsize=(14,8))
plt.plot(Rt)
plt.title("ARMA-GARCH Simulating Process")
plt.grid()
plt.show()
